{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Cell.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Cell from \"./Cell.svelte\";\n  import { runStep } from \"./simulation\";\n  import { onDestroy } from 'svelte';\n\n  let sizex = 30\n  let sizey = 30\n  let cells = []\n  let playing = false\n\n  const interval = setInterval(onTick, 100);\n  onDestroy(() => clearInterval(interval));\n\n  for(let x=0; x<sizex; x++) {\n    for(let y=0; y<sizey; y++) {\n      cells.push({ x, y, state: Math.random() < 0.2 })\n    }\n  }\n\n  function step() {\n    cells = runStep(cells)\n  }\n\n  function pause() {\n    playing = false\n  }\n\n  function play() {\n    playing = true\n  }\n\n  function onTick() {\n    if (playing) {\n      cells = runStep(cells)\n    }\n  }\n\n  function clickedCell(cell) {\n    playing = false\n    cell.state = !cell.state\n    // Tell svelte it's refreshing\n    cells = cells\n  }\n</script>\n\n<header>\n  Game of Life\n</header>\n<svg>\n  {#each cells as cell}\n    <Cell\n      x={cell.x}\n      y={cell.y}\n      state={cell.state}\n      on:click={() => clickedCell(cell) }\n    />\n  {/each}\n</svg>\n<div class=\"buttons\">\n  {#if playing}\n    <button on:click={pause}>\n      Pause\n    </button>\n  {:else}\n    <button on:click={step}>\n      Step\n    </button>\n    <button on:click={play}>\n      Play\n    </button>\n  {/if}\n</div>\n\n<style>\n  header {\n    font-size: 64px;\n    text-align: center;\n  }\n\n  svg {\n    height: 600px;\n    width: 600px;\n    background-color: #888;\n    margin: auto;\n    display: block;\n  }\n\n  .buttons {\n    text-align: center;\n  }\n  button {\n    margin: 0.5em;\n  }\n</style>\n",
    "<script>\n  export let x;\n  export let y;\n  export let state;\n\n  let visualStartX = 20 * x + 1\n  let visualStartY = 20 * y + 1\n</script>\n\n<g on:click>\n  <rect\n    class:alive={state}\n    class:dead={!state}\n    x={visualStartX}\n    y={visualStartY}\n    height={18}\n    width={18}\n  />\n</g>\n\n<style>\n  .dead {\n    fill: #aaa;\n  }\n\n  .alive {\n    fill: #3e3;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA0EE,MAAM,eAAC,CAAC,AACN,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,GAAG,eAAC,CAAC,AACH,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,KAAK,AACf,CAAC;ACvED,KAAK,cAAC,CAAC,AACL,IAAI,CAAE,IAAI,AACZ,CAAC,AAED,MAAM,cAAC,CAAC,AACN,IAAI,CAAE,IAAI,AACZ,CAAC"
}